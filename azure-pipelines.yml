# Multi-Stage pipeline which builds a Docker image, scans it with Snyk, have Snyk report reviewed by security team before pushing image to ACR 

name: $(BuildDefinitionName)_$(date:yyyMMdd)$(rev:.r)

trigger: none
# - master

resources:
  repositories:
#    - repository: 'MyGitHubRepo' # Any name you want to give the repo of your source code. This will be used be used in the checkout step.
#      type: github
#      endpoint: 'MyGitHubServiceConnection'  # Substitute it with name of the service connection to GitHub or external source
#      name: 'MyGitHubOrgOrUser/MyGitHubRepo'    # Name of Organization or GitHub user / GitHubrepo name
    - repository: self

pr: none

# Linux OS self-hosted Agent Pool
pool: 
  name: Selfhosted-PRC382-AKSPlatform-AustraliaEast
  demands:
  - agent.os -equals Linux 

# Variables group
variables:
- group: PRC382-Variables

# Build Stage
stages: 
- stage: PullScan
  displayName: Pull image specified in GitHub's Dockerfile, scan it and push it to ACR 
  jobs:
  - job: PullScan
    displayName: Pull image specified in GitHub's Dockerfile
    steps:
    - checkout: self
#   - checkout: MyGitHubRepo
    

    # Pull base Linux image specified in GitHub's Dockerfile 
    - task: CmdLine@2
      displayName: Pull base Linux image specified in GitHub's Dockerfile
      inputs:
        script: |
          docker pull ubuntu:latest

    # # Scan and monitor image using Snyk commands
    # - bash: |
    #       snyk auth $(SNYK_TOKEN)
    #       npm install -g npm
    #       npm install -g snyk snyk-to-html
    #       snyk container test ubuntu:latest --json
    #       snyk container monitor ubuntu:latest

    # # Prerequisite for Snyk Task
    # - task: NodeTool@0
    #   inputs:
    #     versionSpec: 6.x
    #     force32bit: false
    #     checkLatest: true
        
    # Scan image using Snyk App
    - task: SnykSecurityScan@0
      inputs:
        serviceConnectionEndpoint: $(serviceConnectionEndpoint)
        testType: 'container'
        dockerImageName: ubuntu
        monitorOnBuild: true
        failOnIssues: false
    #    projectName: 'rt_ist_aks_nonprod'
        projectName: 'rt_ist_aks'
        organization: 'caaf64d1-a29d-4a99-b21a-35070251b702'
       # additionalArguments: 'cccc'

    # # Copy the Snyk scan report to Staging Directory
    # - task: CopyFiles@2
    #   displayName: Copy Snyk report to Artifact Staging 
    #   inputs:
    #     sourceFolder: $(Agent.TempDirectory)
    #     Contents: |
    #       *.json
    #     TargetFolder: $(Build.ArtifactStagingDirectory)/SnykReport    
    
    # # Publish Snyk Report so that it can be downloaded by Security Team
    # - task: PublishBuildArtifacts@1
    #   displayName: Publish Snyk report for Security Team
    #   inputs:
    #     PathtoPublish: $(Build.ArtifactStagingDirectory)
    #     ArtifactName: SnykReport

    # Push image to Azure Container Registry (ACR) 
    - task: AzureCLI@2
      displayName: 'Push image to ACR repo'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az acr login --name $(containerRegistry3)
          docker images
          docker push $(containerRegistry3)/ubuntu:latest