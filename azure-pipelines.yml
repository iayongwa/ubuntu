# Multi-Stage pipeline which builds a Docker image, scan it with Snyk, have Snyk report reviewed by security team before pushing image to ACR 

name: $(BuildDefinitionName)_$(date:yyyMMdd)$(rev:.r)

trigger: none
# - master

resources:
- repo: self

pr: none

# Linux OS self-hosted Agent Pool
pool: 
  name: Selfhosted-PRC382-AKS
  demands:
  - agent.os -equals Linux 

variables:
- group: PRC382-Variables

# Build Stage
stages: 
- stage: PullTag
  displayName: Pull image from Docker, tag and scan it 
  jobs:
  - job: PullScan
    displayName: Pull image from Docker, tag and scan it
    steps:
    

    # Pull base Windows image, tag it with ACR repo name and move it to Staging Directory for publishing 
    - task: CmdLine@2
      inputs:
        script: |
          docker pull ubuntu:latest
        # docker image save $(containerRegistry)/ubuntuext:latest -o $(Build.ArtifactStagingDirectory)

    #     # Scan image using Snyk App
    # - task: SnykSecurityScan@0
    #   inputs:
    #     serviceConnectionEndpoint: $(serviceConnectionEndpoint)
    #     testType: 'container'
    #     dockerImageName: ubuntu
    #     monitorOnBuild: true
    #     failOnIssues: false
    #     projectName: $(projectName)
    #     organization: $(organization)
    #    # additionalArguments: 'cccc'

    # # Copy the Snyk scan report to Staging Directory
    # - task: CopyFiles@2
    #   displayName: Copy Snyk report to Artifact Staging 
    #   inputs:
    #     sourceFolder: $(Agent.TempDirectory)
    #     Contents: |
    #       report*.json
    #     TargetFolder: $(Build.ArtifactStagingDirectory)/SnykReport    
    
    # # Publish Snyk Report so that it can be downloaded by Security Team
    # - task: PublishBuildArtifacts@1
    #   displayName: Publish Snyk report for Security Team
    #   inputs:
    #     PathtoPublish: $(Build.ArtifactStagingDirectory)/SnykReport
    #     ArtifactName: SnykReport

    # Push image to Azure Container Registry (ACR) 
    - task: AzureCLI@2
      displayName: 'Push it to new ACR repo'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          docker images
          docker push $(containerRegistry)/ubuntu:latest

#     # Publish image to Staging Directory so that it can be consumed by Deploy Stage
#     - task: PublishBuildArtifacts@1
#       displayName: Publish latest image 
#       inputs:
#         PathtoPublish: $(Build.ArtifactStagingDirectory)
#         ArtifactName: LatestImage
#         Parallel: true
#         ParallelCount: 10
#         StoreAsTar: true


# # Deploy Stage
# - stage: DeployACR
#   displayName: Deploy image to ACR
#   dependsOn: PullTag
#   condition: succeeded()
#   jobs:
#   - deployment: Deploy
#     displayName: Deploy image to ACR
#     environment: DeployACR
#     timeoutInMinutes: 360
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - checkout: none

#           # Download Artifact from Build Stage
#           - download: current
#             artifact: LatestImage
#             displayName: Download artifact containing latest image from Build Stage

#           # Push image to Azure Container Registry (ACR) 
#           - task: AzureCLI@2
#             displayName: 'Tag image and push it to new ACR repo'
#             inputs:
#               azureSubscription: $(azureSubscription)
#               scriptType: ps
#               scriptLocation: inlineScript
#               inlineScript: |
#                 docker images
#                 docker push $(containerRegistry)/ubuntu:latest
